---
#   Copyright 2017 Red Hat, Inc. All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain
#   a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.

- name: Include OS family/distribution specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_lsb.id }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: Install required dependencies
  package:
    name: "{{ item }}"
    state: "present"
  with_items: "{{ required_packages }}"

- name: Install pip
  easy_install: 
    name: pip 
    state: present

- name: Install ARA with pip
  pip:
    name: ara
    state: present

- block:
    - name: Install required dependencies for mod_wsgi
      package:
        name: "{{ item }}"
        state: "present"
      with_items: "{{ required_wsgi_packages }}"

    - name: Get status of selinux
      command: getenforce
      register: selinux_status
      when: ansible_os_family == "RedHat"

    - name: Set selinux boolean to allow Apache to manage the files
      seboolean:
        name: httpd_unified
        state: yes
      when:
        - ansible_os_family == "RedHat"
        - selinux_status.stdout == "Enforcing"

    - name: Set ara_config_path when using mod_wsgi
      set_fact:
        ara_config_path: "{{ config_path | default(default_wsgi_config_path) }}"

    - name: Ensure configuration directory for Ansible and ARA exists
      file:
        path: "{{ ara_config_path }}"
        owner: "{{ apache_user }}"
        group: "{{ apache_group }}"
        state: directory
        recurse: yes

    - name: Create default configuration file if one does not exist
      template:
        src: templates/ansible.cfg.j2
        dest: "{{ ara_config_path }}/ansible.cfg"
        force: no

    - name: Copy ARA's WSGI script to the config path
      shell: cp -p $(which ara-wsgi) {{ ara_config_path }}

    - name: Set up Apache configuration
      template:
        src: templates/ara.conf.j2
        dest: "{{ apache_config_path }}/ara.conf"
        owner: root
        group: root
        mode: 0644
      notify:
        - Restart Apache

    - name: Ensure the configuration is enabled
      command: a2ensite ara
      when: ansible_os_family == "Debian"
      notify:
       - Restart Apache

    - name: Flush handlers
      meta: flush_handlers

    - name: Ensure apache is enabled
      service:
        name: "{{ apache_service }}"
        enabled: yes
  when: mod_wsgi | bool

- block:
    - name: Set ara_config_path when using embedded_server
      set_fact:
        ara_config_path: "{{ config_path | default(default_embedded_config_path) }}"

    - name: Ensure configuration directory for ARA exists
      file:
        path: "{{ ara_config_path }}"
        state: directory
        recurse: yes

    - name: Create default configuration file if one does not exist
      template:
        src: templates/ansible.cfg.j2
        dest: "{{ ara_config_path }}/ansible.cfg"
        force: no

    - name: Get the location of ara-manage
      command: which ara-manage
      register: ara_manage
      changed_when: false

    - name: Copy systemd service template
      template:
        src: templates/ara-service.conf.j2
        dest: /etc/systemd/system/ara.service
        owner: root
        group: root
        mode: 0644
      notify:
        - Reload systemctl

    - name: Flush handlers
      meta: flush_handlers

    - name: Start and enable the embedded server service
      service:
        name: ara
        state: started
        enabled: yes
  when: embedded_server | bool

- name: Get ARA's installed location
  shell: python -c "import os,ara; print(os.path.dirname(ara.__file__))"
  register: ara_location
  changed_when: false

- name: Enable ARA's callback plugin
  ini_file:
    dest: "{{ ara_config_path }}/ansible.cfg"
    section: defaults
    option: callback_plugins
    value: "{{ ara_location.stdout }}/plugins/callbacks"

- name: Provide web application URL
  vars:
    msg: >-
      ARA was installed succesfully !
      The web application should now be reachable at http://{{ ara_host }}:{{ ara_port }} !
      To customize the host and port on which the application listens to, override the defaults for the ara_host and ara_port variables.
      Data from recorded playbooks will be available in the interface as soon as you run your first ansible-playbook command.
  debug:
    msg: "{{ msg.split('\n') }}"

- name: Provide instructions
  vars:
    msg: >-
      We've set up an ansible.cfg file for you inside {{ ara_config_path }}.
      Make sure to have Ansible and ARA use it for everything to work properly.

      This can be done from using Ansible or the ARA CLI commands directly from that directory or by using the ANSIBLE_CONFIG environment variable, like so:
      export ANSIBLE_CONFIG={{ ara_config_path }}/ansible.cfg
  debug:
    msg: "{{ msg.split('\n') }}"
